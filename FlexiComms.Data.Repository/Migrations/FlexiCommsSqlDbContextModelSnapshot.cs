// <auto-generated />
using System;
using FlexiComms.Data.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlexiComms.Data.Repository.Migrations
{
    [DbContext(typeof(FlexiCommsSqlDbContext))]
    partial class FlexiCommsSqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientServiceProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("SubscriptionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientServiceProviderId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.ClientServiceProvider", b =>
                {
                    b.Property<Guid>("ClientServiceProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountSid")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid>("ServiceProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientServiceProviderId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ClientsServiceProviders");
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.HasKey("CompanyId");

                    b.HasIndex("ClientId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.ServiceProvider", b =>
                {
                    b.Property<Guid>("ServiceProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceProviderId");

                    b.ToTable("ServiceProviders");

                    b.HasData(
                        new
                        {
                            ServiceProviderId = new Guid("9bfe6b2f-6df7-47e5-904e-bcb942f74d60"),
                            CreatedBy = "FlexiComms\\System",
                            DateCreated = new DateTime(2020, 2, 23, 0, 16, 51, 620, DateTimeKind.Local).AddTicks(6450),
                            Name = "Twilio"
                        },
                        new
                        {
                            ServiceProviderId = new Guid("f884d1a8-fc85-4975-a518-4167e51534c7"),
                            CreatedBy = "FlexiComms\\System",
                            DateCreated = new DateTime(2020, 2, 23, 0, 16, 51, 625, DateTimeKind.Local).AddTicks(4867),
                            Name = "Nexmo"
                        });
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.SubscriptionType", b =>
                {
                    b.Property<Guid>("SubscriptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionTypeId");

                    b.ToTable("SubscriptionTypes");

                    b.HasData(
                        new
                        {
                            SubscriptionTypeId = new Guid("042ac2d9-0f4e-4356-8028-093322b66c31"),
                            CreatedBy = "FlexiComms\\System",
                            DateCreated = new DateTime(2020, 2, 23, 0, 16, 51, 629, DateTimeKind.Local).AddTicks(1586),
                            Name = "Trial"
                        },
                        new
                        {
                            SubscriptionTypeId = new Guid("ad6f9887-86df-4a22-a011-41de506c048f"),
                            CreatedBy = "FlexiComms\\System",
                            DateCreated = new DateTime(2020, 2, 23, 0, 16, 51, 629, DateTimeKind.Local).AddTicks(3691),
                            Name = "Paid"
                        });
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.Client", b =>
                {
                    b.HasOne("FlexiComms.Data.Entities.Models.ClientServiceProvider", "ClientServiceProvider")
                        .WithMany()
                        .HasForeignKey("ClientServiceProviderId");

                    b.HasOne("FlexiComms.Data.Entities.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("Clients")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.ClientServiceProvider", b =>
                {
                    b.HasOne("FlexiComms.Data.Entities.Models.ServiceProvider", "ServiceProvider")
                        .WithMany("ClientServiceProviders")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlexiComms.Data.Entities.Models.Company", b =>
                {
                    b.HasOne("FlexiComms.Data.Entities.Models.Client", null)
                        .WithMany("Companies")
                        .HasForeignKey("ClientId");
                });
#pragma warning restore 612, 618
        }
    }
}
